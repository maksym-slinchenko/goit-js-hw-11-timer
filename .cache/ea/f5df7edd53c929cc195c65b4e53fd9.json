{"id":"Focm","dependencies":[{"name":"C:\\Users\\User\\Desktop\\IT обучение\\goit-js-hw-11-timer\\package.json","includedInParent":true,"mtime":1606065137437},{"name":"./css/styles.css","loc":{"line":1,"column":7},"parent":"C:\\Users\\User\\Desktop\\IT обучение\\goit-js-hw-11-timer\\src\\index.js","resolved":"C:\\Users\\User\\Desktop\\IT обучение\\goit-js-hw-11-timer\\src\\css\\styles.css"},{"name":"./temlates/page-layout.hbs","loc":{"line":2,"column":24},"parent":"C:\\Users\\User\\Desktop\\IT обучение\\goit-js-hw-11-timer\\src\\index.js","resolved":"C:\\Users\\User\\Desktop\\IT обучение\\goit-js-hw-11-timer\\src\\temlates\\page-layout.hbs"}],"generated":{"js":"\"use strict\";require(\"./css/styles.css\");var e=s(require(\"./temlates/page-layout.hbs\"));function s(e){return e&&e.__esModule?e:{default:e}}"},"sourceMaps":{"js":{"mappings":[{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":0}},{"source":"index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":13}},{"source":"index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":21}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":41}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":45}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":47}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":49}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":57}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":88}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":97}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":99}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":102}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":109}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":112}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":114}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":125}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":127}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":128}},{"source":"index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":136}}],"sources":{"index.js":"import \"./css/styles.css\";\nimport getTemplate from \"./temlates/page-layout.hbs\";\n\n// class CountdownTimer {\n//   constructor({ selector, targetDate }, template) {\n//     this.selector = selector;\n//     this.targetDate = targetDate;\n//     this.template = template\n//   }\n//   // переменные;\n//   timerEl = document.querySelector(this.selector);\n//   startdeltaTime = this.targetDate - Date.now();\n//   startDates = getDateArrey(startdeltaTime);\n\n//   // Функция добавления \"0\" в значение счетчика\n//   pad = function (value, symbolNumbers) {\n//     return String(value).padStart(symbolNumbers, \"0\");\n//   };\n//   // ФУнкция создания массива значений счетчика\n//   getDateArrey = function (deltaTime) {\n//     let dates = [];\n//     return (dates = [\n//       {\n//         label: \"Days\",\n//         dataValue: \"days\",\n//         value: pad(Math.floor(deltaTime / (1000 * 60 * 60 * 24)), 3),\n//       },\n//       {\n//         label: \"Hours\",\n//         dataValue: \"hours\",\n//         value: pad(\n//           Math.floor((deltaTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n//           2\n//         ),\n//       },\n//       {\n//         label: \"Minutes\",\n//         dataValue: \"mins\",\n//         value: pad(Math.floor((deltaTime % (1000 * 60 * 60)) / (1000 * 60)), 2),\n//       },\n//       {\n//         label: \"Seconds\",\n//         dataValue: \"secs\",\n//         value: pad(Math.floor((deltaTime % (1000 * 60)) / 1000), 2),\n//       },\n//     ]);\n//   };\n//   //  Функция наполнения структуры документа\n//   layoutMaker = function () {\n//     timerEl.insertAdjacentHTML(\"afterbegin\", this.template(startDates));\n//   };\n//   // layoutMaker();\n//   // Функция внесения значений таймера\n// insertTimerValue = function (dates) {\n//   for (let i = 0; i < dates.length; i += 1) {\n//     if (\n//       dates[i].dataValue ===\n//       document\n//         .querySelector(`[data-value=\"${dates[i].dataValue}\"]`)\n//         .getAttribute(\"data-value\")\n//     ) {\n//       document.querySelector(\n//         `[data-value=\"${dates[i].dataValue}\"]`\n//       ).textContent = dates[i].value;\n//     }\n//   }\n// };\n// insertTimerValue(startDates);\n// timerStep = function () {\n//   const currentdeltaTime = this.targetDate - Date.now();\n//   const currentDates = getDateArrey(currentdeltaTime);\n//   insertTimerValue(currentDates);\n// }\n// makeTimerStep = function () {setInterval(timerStep (), 1000)};\n// makeTimerStep ()\n// }\n\n// // Создаем новый объект с помощью конструктора\n\n// const timer = new CountdownTimer({\n//   selector: \"#timer-1\",\n//   targetDate: new Date(\"Jul 17, 2019\"),\n// }, template: getTemplate);\n\n// console.log(timer)\n"},"lineCount":null}},"error":null,"hash":"8531bb356b9c6335b2f332164b39072c","cacheData":{"env":{}}}